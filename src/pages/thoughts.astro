---
// Component Imports
import Layout from "../layouts/Layout.astro";
import Header from "../components/elements/Header.astro";
import ListItem from "../components/elements/ListItem.astro";
import ListItemHeader from "../components/elements/ListItemHeader.astro";

// Asset Imports
import article from "../assets/other/post.png";
import notebook from "../assets/other/clipboard.png";

// Data Fetching
import { getThoughts } from "../lib/notion";
import type { ThoughtPost } from "../lib/notion";
import { getCollection, type CollectionEntry } from 'astro:content';

// Fetch Notebooks (Content Collection)
const contentPosts = await getCollection('notebooks');
const sideNotes = contentPosts;

// Fetch and Filter Notion Posts
const notionPosts = await getThoughts();
const mainPosts = notionPosts.filter((post: ThoughtPost) => 
  !post.categories.includes("Briefs")
);

// Group Posts by Year
const years = [
  ...new Set(mainPosts.map((post) => 
    new Date(post.date).getFullYear()
  )),
].sort((a, b) => b - a);

// Helper Functions
const getPostsForYear = (year: number) =>
  mainPosts.filter((post) => 
    new Date(post.date).getFullYear() === year
  );

const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    month: '2-digit', 
    day: '2-digit' 
  });
};
---

<Layout
  pageTitle="Thoughts - Karina Tovar"
  pageDescription="Mental Notes and Deep Thoughts"
>
  {/* Page Header */}
  <Header 
    title="Notes & Deep Thoughts" 
    subtitle="Diary of a pixel philosopher" 
    description="This is where I keep my thoughts and ideas. I write about design, technology, and human happiness." />

  {/* Notebooks Section */}
  <section>
    <h3 class="mt-20 mb-5 text-5xl font-medium opacity-50">
      Notebooks
    </h3>
    <div class="writing-list">
      {sideNotes.map((post: CollectionEntry<'notebooks'>) => (
        <ListItem
          isLink={true}
          label={post.data.title}
          detail={new Date().getFullYear().toString()}
          href={`/notebooks/${post.slug}`}
          icon={notebook}
          iconWidth={12}
          iconHeight={12}
        />
      ))}
    </div>
  </section>

  {/* Yearly Posts Sections */}
  {years.map((year) => {
    const postsForYear = getPostsForYear(year);
    return (
      <section>
        <h3 class="mt-20 mb-5 text-5xl font-medium opacity-50">
          {year}
        </h3>
        <ListItemHeader 
          leftLabel="TITLE" 
          rightLabel="DATE" 
        />
        <div class="writing-list">
          {postsForYear.map((post) => (
            <ListItem
              isLink={true}
              label={post.title}
              detail={formatDate(post.date)}
              href={post.href}
              icon={article}
              iconWidth={10}
              iconHeight={10}
            />
          ))}
        </div>
      </section>
    );
  })}
</Layout>

<style>
  .writing-list {
    @apply space-y-3 mt-2 relative;
  }

  .fade-up {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .fade-up.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script define:vars={{ threshold: 0.2 }}>
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll("section");
    
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible");
          }
        });
      },
      { threshold }
    );

    sections.forEach((section) => {
      section.classList.add("fade-up");
      observer.observe(section);
    });
  });
</script>
