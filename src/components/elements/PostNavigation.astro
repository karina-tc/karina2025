---
import { getThoughts } from "../../lib/notion";
import { getCollection, type CollectionEntry } from "astro:content";
import type { ThoughtPost } from "../../lib/notion";
import ArrowLeft from "phosphor-astro/ArrowLeft.astro";
import ArrowRight from "phosphor-astro/ArrowRight.astro";

interface Props {
  currentSlug: string;
}

// Get all posts from both sources
const notionPosts = await getThoughts();
const contentPosts = await getCollection("notebooks");

// Combine and sort all posts by date
const allPosts = [
  ...notionPosts.map((post: ThoughtPost) => ({
    title: post.title,
    date: post.date,
    href: post.href,
    slug: post.href.split("/").pop(),
  })),
  ...contentPosts.map((post: CollectionEntry<"notebooks">) => ({
    title: post.data.title,
    date: post.data.date,
    href: `/notebooks/${post.slug}`,
    slug: post.slug,
  })),
].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const { currentSlug } = Astro.props;

// Find current post index
const currentIndex = allPosts.findIndex((post) => post.slug === currentSlug);
const prevPost =
  currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
---

<nav class="thoughts-navigation">
  {
    prevPost && (
      <a href={prevPost.href} class="group thoughts-navigation-item previous">
        <ArrowLeft class="thoughts-navigation-icon" />
        <span class="thoughts-navigation-text">
          <span class="thoughts-navigation-text-label">Previous</span>
          <span class="thoughts-navigation-text-title">{prevPost.title}</span>
        </span>
      </a>
    )
  }

  {
    nextPost && (
      <a href={nextPost.href} class="group thoughts-navigation-item next">
        <span class="thoughts-navigation-text">
          <span class="thoughts-navigation-text-label">Next</span>
          <span class="thoughts-navigation-text-title">{nextPost.title}</span>
        </span>
        <ArrowRight class="thoughts-navigation-icon" />
      </a>
    )
  }
</nav>

<style>
  .thoughts-navigation {
    @apply mt-20 flex justify-between items-center max-md:flex-col max-md:gap-4;
  }

  .thoughts-navigation-item {
    @apply flex items-center gap-2 max-md:w-full;
  }

  .thoughts-navigation-item.next:not(:only-child) {
    @apply max-md:w-full max-md:border-t max-md:border-neutral-200 max-md:border-dashed max-md:pt-4;

    .thoughts-navigation-text {
      @apply max-md:pl-11;
    }
  }

  .thoughts-navigation-text {
    @apply text-sm max-md:w-full [&>span]:block;
  }

  .thoughts-navigation-text-label {
    @apply opacity-60;
  }

  .thoughts-navigation-text-title {
    @apply text-lg;
  }

  .thoughts-navigation-icon {
    @apply w-10 h-10 opacity-60 group-hover:text-purple-500;
  }
</style>
