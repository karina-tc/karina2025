---
const { navigation_items } = Astro.props;
const currentPath = Astro.url.pathname;
---

<div class="navigation-container">
  {
    navigation_items.map((item: { href: string; label: unknown; }) => (
      <a
        href={item.href ?? "#"}
        class={currentPath === item.href ? "active" : ""}
        aria-label={item.label?.toString() ?? "Navigation link"}
      >
        {item.label}
      </a>
    ))
  }
  <div class="nav-line"></div>
</div>

<style>
  .navigation-container {
    @apply flex items-center justify-center gap-4 w-fit m-auto py-3 px-6 bg-paper-darker rounded-full shadow-sm backdrop-blur-sm relative;

    .nav-line {
      @apply absolute h-[2px] bg-purple-light transition-all duration-300 ease-in-out;
      width: 0;
    }

    a {
      @apply text-base text-ink-secondary leading-6 transition-colors duration-200 focus:outline-none relative;
      user-select: none;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", updateNavLine);

  function updateNavLine() {
    const container = document.querySelector(".navigation-container");
    const navLine = container?.querySelector(".nav-line");
    const links = container?.querySelectorAll("a");
    // Bail out if no container, nav-line, or links are found
    if (!container || !navLine || !links?.length) return;

    // Function to update the position of the line
    function positionLine(link: Element) {
      const rect = link.getBoundingClientRect();
      const containerRect = container.getBoundingClientRect();
      if (navLine instanceof HTMLElement) {
        navLine.style.width = `${rect.width + 2}px`;
        navLine.style.left = `${rect.left - containerRect.left - 2}px`;
        navLine.style.bottom = "12px"; // Adjust this to position the line
      }
    }

    // Initially position the line based on the active link
    const activeLink = container.querySelector("a.active");
    if (activeLink) {
      positionLine(activeLink);
    }

    // Add hover events to adjust line position on mouseenter/mouseleave
    links.forEach((link) => {
      link.addEventListener("mouseenter", () => positionLine(link));
      link.addEventListener("mouseleave", () => {
        if (activeLink) {
          positionLine(activeLink);
        } else {
          if (navLine instanceof HTMLElement) {
            navLine.style.width = "0";
          }
        }
      });
    });
  }

  // Initial page load position
  updateNavLine();
</script>
